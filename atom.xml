<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>怪客的Blog</title>
  
  <subtitle>分享一些黑科技</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://guaik.github.io/"/>
  <updated>2020-06-04T08:41:40.214Z</updated>
  <id>https://guaik.github.io/</id>
  
  <author>
    <name>guaik</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搞定网络爬虫登陆验证-使用浏览器Cookie</title>
    <link href="https://guaik.github.io/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81/"/>
    <id>https://guaik.github.io/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81/</id>
    <published>2020-06-04T02:04:40.000Z</published>
    <updated>2020-06-04T08:41:40.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="登陆验证是什么？"><a href="#登陆验证是什么？" class="headerlink" title="登陆验证是什么？"></a>登陆验证是什么？</h2><p><a href="https://www.wjx.cn/wjx/viewfile.aspx?path=https%3a%2f%2fpubuserqiniu.paperol.cn%2f80373144_1_q1_1591205817ZF4mBh.png%3fattname%3d1_1_3EADD86A-FFEB-469C-A77E-A6F5C7B0D635.png&amp;activity=80373144" target="_blank" rel="noopener">https://www.wjx.cn/wjx/viewfile.aspx?path=https%3a%2f%2fpubuserqiniu.paperol.cn%2f80373144_1_q1_1591205817ZF4mBh.png%3fattname%3d1_1_3EADD86A-FFEB-469C-A77E-A6F5C7B0D635.png&amp;activity=80373144</a></p><p>先点上边链接，发现打开的不是一张图片，而是一个登陆页面。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81/login.png" alt="登陆" title>                </div>                <div class="image-caption">登陆</div>            </figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="url分析"><a href="#url分析" class="headerlink" title="url分析"></a>url分析</h3><p>上边url是一个图片连接，但是实际的图片url是作为参数(path)传给服务器的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https%3a%2f%2fpubuserqiniu.paperol.cn%2f80373144_1_q1_1591205817ZF4mBh.png%3fattname%3d1_1_3EADD86A-FFEB-469C-A77E-A6F5C7B0D635.png</span><br></pre></td></tr></table></figure><p>使用url解码看下图片地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pubuserqiniu.paperol.cn/80373144_1_q1_1591205817ZF4mBh.png?attname=1_1_3EADD86A-FFEB-469C-A77E-A6F5C7B0D635.png</span><br></pre></td></tr></table></figure><ul><li>可以知道图片存储用的是七牛云的对象存储服务。</li></ul><h3 id="登陆分析"><a href="#登陆分析" class="headerlink" title="登陆分析"></a>登陆分析</h3><ul><li><p>Chrome浏览器，打开“开发者工具”，点击“Network”，如果“Network”中存在内容，就先清空一下。</p></li><li><p>输入账号密码（可能需要输入验证码）登陆，查看“Network”中的数据：</p></li></ul><blockquote><p>当输入完账号密码后，图片已经被下载了</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81/WX20200604-104032@2x.png" alt="分析" title>                </div>                <div class="image-caption">分析</div>            </figure><p>通过上图可以知道获取一个图片是经过了3个步骤的，前两步骤的返回状态码都是302（重定向），第三步才是真正的请求。</p><ul><li>点击第一个URL</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81/WX20200604-104918.png" alt="分析1" title>                </div>                <div class="image-caption">分析1</div>            </figure><blockquote><p>因为是302状态，所以检查返回数据的头部信息，能够发现两个关键参数：1、重定向地址（Location）。2、本地请求会在本地设置的Cookie。</p><p>所有我们在开发脚本的时候也会使用到Cookie的功能。</p></blockquote><ul><li>点击第二个URL(为第一个URL重定向的目标地址)</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81/WX20200604-110003.png" alt="分析2" title>                </div>                <div class="image-caption">分析2</div>            </figure><p><strong>这里有个重要信息，重定向的地址中带有token参数</strong></p><ul><li>第三步，最后一步！</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81/WX20200604-111207.png" alt="分析3" title>                </div>                <div class="image-caption">分析3</div>            </figure><p>继续分析返回数据，发现Content-Type是image/png，这时候就可以确认返回的数据是图片格式了。</p><h2 id="爬虫设计"><a href="#爬虫设计" class="headerlink" title="爬虫设计"></a>爬虫设计</h2><p><strong>开发语言：Python3.X</strong></p><h3 id="需求1：需要登陆验证，并且要处理登陆验证码"><a href="#需求1：需要登陆验证，并且要处理登陆验证码" class="headerlink" title="需求1：需要登陆验证，并且要处理登陆验证码"></a>需求1：需要登陆验证，并且要处理登陆验证码</h3><p>实现：直接使用浏览器登陆后使用浏览器生成的Cookie，用到的库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install browser_cookie3</span><br></pre></td></tr></table></figure><h3 id="需求2：在请求数据的时候，前两次重定向应答的headers中都需要设置Cookie"><a href="#需求2：在请求数据的时候，前两次重定向应答的headers中都需要设置Cookie" class="headerlink" title="需求2：在请求数据的时候，前两次重定向应答的headers中都需要设置Cookie"></a>需求2：在请求数据的时候，前两次重定向应答的headers中都需要设置Cookie</h3><p>实现：使用<code>urllib.request.HTTPCookieProcessor</code>来管理Cookie</p><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p>⚠️注意事项：</p><p>1、测试发现需要登陆管理后台，下载最新的分析报告(excel)，从里边拿到图片的url才能使用当前浏览器的Cookie进行操作。</p><p>2、第一次GET请求后发现headers中没有Location字段，但是在返回内容中找到了重定向用到的的url，所以用xpath提取出来使用。</p><p>3、<code>browser_cookie3</code>获取Chrome的Cookie存在问题，获取Firefox的Cookie可正常使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> browser_cookie3</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"https://www.wjx.cn/wjx/viewfile.aspx?path=https%3a%2f%2fpubuserqiniu.paperol.cn%2f80373144_1_q1_1591205817ZF4mBh.png%3fattname%3d1_1_3EADD86A-FFEB-469C-A77E-A6F5C7B0D635.png&amp;activity=80373144"</span></span><br><span class="line">    filename = <span class="string">"./demo.png"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 加载火狐浏览器Cookie</span></span><br><span class="line">        cj = browser_cookie3.Firefox().load()</span><br><span class="line">        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))</span><br><span class="line">        request = urllib.request.Request(url)</span><br><span class="line">        <span class="comment"># 第一次请求</span></span><br><span class="line">        response = opener.open(request)</span><br><span class="line">        data = response.read()</span><br><span class="line">        html = etree.HTML(data)</span><br><span class="line">        url = <span class="string">'https://www.wjx.cn'</span> + html.xpath(<span class="string">'//a/@href'</span>)[<span class="number">0</span>]</span><br><span class="line">        request = urllib.request.Request(url, method=<span class="string">"GET"</span>)</span><br><span class="line">        <span class="comment"># 第二次请求</span></span><br><span class="line">        response = opener.open(request)</span><br><span class="line">        <span class="keyword">if</span> (response.getcode() == <span class="number">200</span>):</span><br><span class="line">            <span class="keyword">with</span> open(filename, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.read())  <span class="comment"># 将内容写入图片</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    download()</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p><strong>请合理使用爬虫，遵循网站robot.txt规则</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;登陆验证是什么？&quot;&gt;&lt;a href=&quot;#登陆验证是什么？&quot; class=&quot;headerlink&quot; title=&quot;登陆验证是什么？&quot;&gt;&lt;/a&gt;登陆验证是什么？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.wjx.cn/wjx/viewfile.aspx?
      
    
    </summary>
    
    
    
      <category term="爬虫" scheme="https://guaik.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="验证" scheme="https://guaik.github.io/tags/%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>搞定网络爬虫登陆验证</title>
    <link href="https://guaik.github.io/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81-%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8Cookie/"/>
    <id>https://guaik.github.io/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81-%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8Cookie/</id>
    <published>2020-06-04T02:04:40.000Z</published>
    <updated>2020-06-04T04:37:57.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="登陆验证是什么？"><a href="#登陆验证是什么？" class="headerlink" title="登陆验证是什么？"></a>登陆验证是什么？</h2><p><a href="https://www.wjx.cn/wjx/viewfile.aspx?path=https%3a%2f%2fpubuserqiniu.paperol.cn%2f80373144_1_q1_1591205817ZF4mBh.png%3fattname%3d1_1_3EADD86A-FFEB-469C-A77E-A6F5C7B0D635.png&amp;activity=80373144" target="_blank" rel="noopener">https://www.wjx.cn/wjx/viewfile.aspx?path=https%3a%2f%2fpubuserqiniu.paperol.cn%2f80373144_1_q1_1591205817ZF4mBh.png%3fattname%3d1_1_3EADD86A-FFEB-469C-A77E-A6F5C7B0D635.png&amp;activity=80373144</a></p><p>先点上边链接，发现打开的不是一张图片，而是一个登陆页面。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81-%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8Cookie/login.png" alt="登陆" title>                </div>                <div class="image-caption">登陆</div>            </figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="url分析"><a href="#url分析" class="headerlink" title="url分析"></a>url分析</h3><p>上边url是一个图片连接，但是实际的图片url是作为参数(path)传给服务器的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https%3a%2f%2fpubuserqiniu.paperol.cn%2f80373144_1_q1_1591205817ZF4mBh.png%3fattname%3d1_1_3EADD86A-FFEB-469C-A77E-A6F5C7B0D635.png</span><br></pre></td></tr></table></figure><p>使用url解码看下图片地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://pubuserqiniu.paperol.cn/80373144_1_q1_1591205817ZF4mBh.png?attname=1_1_3EADD86A-FFEB-469C-A77E-A6F5C7B0D635.png</span><br></pre></td></tr></table></figure><ul><li>可以知道图片存储用的是七牛云的对象存储服务。</li></ul><h3 id="登陆分析"><a href="#登陆分析" class="headerlink" title="登陆分析"></a>登陆分析</h3><ul><li><p>Chrome浏览器，打开“开发者工具”，点击“Network”，如果“Network”中存在内容，就先清空一下。</p></li><li><p>输入账号密码（可能需要输入验证码）登陆，查看“Network”中的数据：</p></li></ul><blockquote><p>当输入完账号密码后，图片已经被下载了</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81-%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8Cookie/WX20200604-104032@2x.png" alt="分析" title>                </div>                <div class="image-caption">分析</div>            </figure><p>通过上图可以知道获取一个图片是经过了3个步骤的，前两步骤的返回状态码都是302（重定向），第三步才是真正的请求。</p><ul><li>点击第一个URL</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81-%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8Cookie/WX20200604-104918.png" alt="分析1" title>                </div>                <div class="image-caption">分析1</div>            </figure><blockquote><p>因为是302状态，所以检查返回数据的头部信息，能够发现两个关键参数：1、重定向地址（Location）。2、本地请求会在本地设置的Cookie。</p><p>所有我们在开发脚本的时候也会使用到Cookie的功能。</p></blockquote><ul><li>点击第二个URL(为第一个URL重定向的目标地址)</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81-%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8Cookie/WX20200604-110003.png" alt="分析2" title>                </div>                <div class="image-caption">分析2</div>            </figure><p><strong>这里有个重要信息，重定向的地址中带有token参数</strong></p><ul><li>第三步，最后一步！</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/06/04/%E6%90%9E%E5%AE%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E7%99%BB%E9%99%86%E9%AA%8C%E8%AF%81-%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8Cookie/WX20200604-111207.png" alt="分析3" title>                </div>                <div class="image-caption">分析3</div>            </figure><p>继续分析返回数据，发现Content-Type是image/png，这时候就可以确认返回的数据是图片格式了。</p><h2 id="爬虫设计"><a href="#爬虫设计" class="headerlink" title="爬虫设计"></a>爬虫设计</h2><p><strong>开发语言：Python3.X</strong></p><h3 id="需求1：需要登陆验证，并且要处理登陆验证码"><a href="#需求1：需要登陆验证，并且要处理登陆验证码" class="headerlink" title="需求1：需要登陆验证，并且要处理登陆验证码"></a>需求1：需要登陆验证，并且要处理登陆验证码</h3><p>实现：直接使用浏览器登陆后使用浏览器生成的Cookie，用到的库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install browser_cookie3</span><br></pre></td></tr></table></figure><h3 id="需求2：在请求数据的时候，前两次重定向应答的headers中都需要设置Cookie"><a href="#需求2：在请求数据的时候，前两次重定向应答的headers中都需要设置Cookie" class="headerlink" title="需求2：在请求数据的时候，前两次重定向应答的headers中都需要设置Cookie"></a>需求2：在请求数据的时候，前两次重定向应答的headers中都需要设置Cookie</h3><p>实现：使用<code>urllib.request.HTTPCookieProcessor</code>来管理Cookie</p><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p>⚠️注意事项：</p><p>1、测试发现需要登陆管理后台，下载最新的分析报告(excel)，从里边拿到图片的url才能使用当前浏览器的Cookie进行操作。</p><p>2、第一次GET请求后发现headers中没有Location字段，但是在返回内容中找到了重定向用到的的url，所以用xpath提取出来使用。</p><p>3、<code>browser_cookie3</code>获取Chrome的Cookie存在问题，获取Firefox的Cookie可正常使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> browser_cookie3</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"https://www.wjx.cn/wjx/viewfile.aspx?path=https%3a%2f%2fpubuserqiniu.paperol.cn%2f80373144_1_q1_1591205817ZF4mBh.png%3fattname%3d1_1_3EADD86A-FFEB-469C-A77E-A6F5C7B0D635.png&amp;activity=80373144"</span></span><br><span class="line">    filename = <span class="string">"./demo.png"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 加载火狐浏览器Cookie</span></span><br><span class="line">        cj = browser_cookie3.Firefox().load()</span><br><span class="line">        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))</span><br><span class="line">        request = urllib.request.Request(url)</span><br><span class="line">        <span class="comment"># 第一次请求</span></span><br><span class="line">        response = opener.open(request)</span><br><span class="line">        data = response.read()</span><br><span class="line">        html = etree.HTML(data)</span><br><span class="line">        url = <span class="string">'https://www.wjx.cn'</span> + html.xpath(<span class="string">'//a/@href'</span>)[<span class="number">0</span>]</span><br><span class="line">        request = urllib.request.Request(url, method=<span class="string">"GET"</span>)</span><br><span class="line">        <span class="comment"># 第二次请求</span></span><br><span class="line">        response = opener.open(request)</span><br><span class="line">        <span class="keyword">if</span> (response.getcode() == <span class="number">200</span>):</span><br><span class="line">            <span class="keyword">with</span> open(filename, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.read())  <span class="comment"># 将内容写入图片</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    download()</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p><strong>请合理使用爬虫，遵循网站robot.txt规则</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;登陆验证是什么？&quot;&gt;&lt;a href=&quot;#登陆验证是什么？&quot; class=&quot;headerlink&quot; title=&quot;登陆验证是什么？&quot;&gt;&lt;/a&gt;登陆验证是什么？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.wjx.cn/wjx/viewfile.aspx?
      
    
    </summary>
    
    
    
      <category term="爬虫" scheme="https://guaik.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="验证" scheme="https://guaik.github.io/tags/%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>Flutter使用SharedPreferences：单例+同步</title>
    <link href="https://guaik.github.io/2020/05/23/Flutter%E4%BD%BF%E7%94%A8SharedPreferences%EF%BC%9A%E5%8D%95%E4%BE%8B+%E5%90%8C%E6%AD%A5/"/>
    <id>https://guaik.github.io/2020/05/23/Flutter%E4%BD%BF%E7%94%A8SharedPreferences%EF%BC%9A%E5%8D%95%E4%BE%8B+%E5%90%8C%E6%AD%A5/</id>
    <published>2020-05-23T13:38:32.000Z</published>
    <updated>2020-05-25T02:23:20.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flutter如何本地存储K-V数据呢？"><a href="#Flutter如何本地存储K-V数据呢？" class="headerlink" title="Flutter如何本地存储K/V数据呢？"></a>Flutter如何本地存储K/V数据呢？</h2><p>SharedPreferences是个不错的选择，当然几乎所有嵌入式系统都支持SQLite，你乐意就好。</p><h3 id="安装SharedPreferences"><a href="#安装SharedPreferences" class="headerlink" title="安装SharedPreferences"></a>安装SharedPreferences</h3><ul><li>在<strong>pubspec.yaml</strong>中添加依赖项</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">    <span class="attr">shared_preferences:</span> <span class="string">^0.5.7+3</span></span><br></pre></td></tr></table></figure><ul><li>安装依赖项<code>flutter pub get</code></li></ul><h2 id="SharedPreferences如何使用？"><a href="#SharedPreferences如何使用？" class="headerlink" title="SharedPreferences如何使用？"></a>SharedPreferences如何使用？</h2><h3 id="太简单了，直接上代码"><a href="#太简单了，直接上代码" class="headerlink" title="太简单了，直接上代码"></a>太简单了，直接上代码</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储token字符串</span></span><br><span class="line"><span class="keyword">void</span> SetToken(token) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.prefs = <span class="keyword">await</span> SharedPreferences.getInstance();</span><br><span class="line">    <span class="keyword">this</span>.prefs.setString(<span class="string">"token"</span>, token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取token字符串</span></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; GetToken() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.prefs = <span class="keyword">await</span> SharedPreferences.getInstance();</span><br><span class="line">    <span class="built_in">String</span> token = <span class="keyword">this</span>.prefs.getString(<span class="string">"token"</span>);</span><br><span class="line">    <span class="keyword">return</span> token == <span class="keyword">null</span> ? <span class="string">""</span> : token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例用了<code>setString</code>和<code>getString</code>来处理字符串，还支持对<code>int</code>,<code>bool</code>,<code>double</code>,<code>List&lt;String&gt;</code>类型的处理。</p><h3 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h3><ul><li><p><code>await SharedPreferences.getInstance()</code>从这行代码可以了解到的信息是：1、SharedPreferences采用了异步调用。2、静态方法<code>getInstance()</code>可以确定它是个单例模式。</p></li><li><p>如果所有使用到存储的函数都采用异步调用可能会产生一些问题，在Flutter的页面代码中<code>Widget build(BuildContext context)</code>需要返回一个<code>Widget</code>的对象，有时候我们需要从本地存储中读取状态值来确定返回什么页面。如果是异步调用的话可能会返回一个<code>null</code>值而导致编译报错，因为异步调用不会等待函数执行完就继续执行下面的流程了，这时候很有可能就执行完函数并且什么都没返回。</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StartupPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StartupPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    Widget page;</span><br><span class="line">    SharedPreferences.getInstance().then((prefs) &#123;</span><br><span class="line">      <span class="keyword">var</span> isFirst = prefs.getBool(<span class="string">"isFirst"</span>);</span><br><span class="line">      <span class="keyword">if</span> (isFirst == <span class="keyword">null</span> || <span class="keyword">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是第一次登陆，则显示启动页</span></span><br><span class="line">        page = BootstrapPage();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则执行跳转到登陆页</span></span><br><span class="line">        page = LoginPage();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 这里可能返回null值</span></span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SharedPreferences使用单例模式再封装"><a href="#SharedPreferences使用单例模式再封装" class="headerlink" title="SharedPreferences使用单例模式再封装"></a>SharedPreferences使用单例模式再封装</h2><ul><li>在<code>main</code>函数中调用<code>Init</code>生成实力并存储SharedPreferences对，这样就不用每次异步获取了。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span>  </span>&#123;</span><br><span class="line">  Storage._();</span><br><span class="line">  SharedPreferences prefs;</span><br><span class="line">  <span class="keyword">static</span> Storage _instance;</span><br><span class="line">  <span class="keyword">static</span> Storage getInstance() &#123;</span><br><span class="line">    <span class="keyword">if</span>(_instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      _instance = Storage._();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Init() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.prefs = <span class="keyword">await</span> SharedPreferences.getInstance();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> startup() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> Storage.getInstance().Init();</span><br><span class="line">  runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized();</span><br><span class="line">  startup();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Storage单例"><a href="#使用Storage单例" class="headerlink" title="使用Storage单例"></a>使用Storage单例</h3><blockquote><p>感谢猫哥提醒：<br>在<code>SharedPreferences</code>中，所有的写入操作都是异步函数，包含（set, clear），所有的get都是同步函数。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储token字符串</span></span><br><span class="line"><span class="comment">// setString为异步函数，如果是同步逻辑需要使用await。</span></span><br><span class="line"><span class="keyword">void</span> SetToken(token) <span class="keyword">async</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> torage.getInstance().prefs.setString(<span class="string">"token"</span>, token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取token字符串</span></span><br><span class="line"><span class="built_in">String</span> GetToken() &#123;</span><br><span class="line">    <span class="built_in">String</span> token = Storage.getInstance().prefs.getString(<span class="string">"token"</span>);</span><br><span class="line">    <span class="keyword">return</span> token == <span class="keyword">null</span> ? <span class="string">""</span> : token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取是否第一次运行</span></span><br><span class="line"><span class="built_in">bool</span> isFirst() &#123;</span><br><span class="line">    <span class="keyword">var</span> state = Storage.getInstance().prefs.getBool(<span class="string">"isFirst"</span>);</span><br><span class="line">    <span class="keyword">return</span> state == <span class="keyword">null</span> ? <span class="keyword">false</span> : <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Flutter如何本地存储K-V数据呢？&quot;&gt;&lt;a href=&quot;#Flutter如何本地存储K-V数据呢？&quot; class=&quot;headerlink&quot; title=&quot;Flutter如何本地存储K/V数据呢？&quot;&gt;&lt;/a&gt;Flutter如何本地存储K/V数据呢？&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="flutter" scheme="https://guaik.github.io/categories/flutter/"/>
    
    
      <category term="flutter" scheme="https://guaik.github.io/tags/flutter/"/>
    
      <category term="SharedPreferences" scheme="https://guaik.github.io/tags/SharedPreferences/"/>
    
      <category term="单例模式" scheme="https://guaik.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="同步" scheme="https://guaik.github.io/tags/%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>递归算法，lua的table与json互转</title>
    <link href="https://guaik.github.io/2020/04/15/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%EF%BC%8Clua%E7%9A%84table%E4%B8%8Ejson%E4%BA%92%E8%BD%AC/"/>
    <id>https://guaik.github.io/2020/04/15/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%EF%BC%8Clua%E7%9A%84table%E4%B8%8Ejson%E4%BA%92%E8%BD%AC/</id>
    <published>2020-04-15T04:10:00.000Z</published>
    <updated>2020-05-23T13:43:21.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题几乎是关键词组成，那么这篇文章会讲些什么？"><a href="#标题几乎是关键词组成，那么这篇文章会讲些什么？" class="headerlink" title="标题几乎是关键词组成，那么这篇文章会讲些什么？"></a>标题几乎是关键词组成，那么这篇文章会讲些什么？</h2><ul><li>递归算法的使用</li><li>golang调用lua的方法</li><li>lua中table与json的相互转换</li></ul><h2 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>处理层级关系的结构，遍历数据非它莫属</p><h3 id="如何设计递归"><a href="#如何设计递归" class="headerlink" title="如何设计递归"></a>如何设计递归</h3><ul><li><p>层级分类，统一函数参数与返回值</p></li><li><p>何时开始返回</p></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>小白能听懂的：什么是层级关系的结构呢？在windows系统中有个“我的电脑”，“我的电脑”中还有C,D,E,F盘，C盘中还有windows目录存放系统文件，D盘中还有我珍藏多年的【日本***空小姐】。所以最简单的理解就是一层套一层的关系。</p><p>中白能听懂的：二叉树遍历，父子节点关系。json中一层层的花括号{}。这些都是明显的层级关系。</p><p>所以本文中处理table与json的转换就使用递归算法。</p><h2 id="golang如何调用lua的方法"><a href="#golang如何调用lua的方法" class="headerlink" title="golang如何调用lua的方法"></a>golang如何调用lua的方法</h2><h3 id="lua是什么"><a href="#lua是什么" class="headerlink" title="lua是什么"></a>lua是什么</h3><p>首先它是一门脚本语言，但是它特别适合嵌入其他的语言中。那么为什么要嵌入其他语言呢？自己都是一个语言了在嵌入个lua不多余吗？</p><p>我就拿C++举个栗子，C++的程序每次更新代码都是需要重新编译链接的，哪怕改动一点逻辑就要重新编译才行。某些情况下程序经常会修改一些业务逻辑，游戏中的智能状态机，在调试的时候每次修改都需要重新编译链接就太麻烦了，如果把状态机写个接口给lua去调用，修改脚本就可以调整状态机的逻辑，这太爽了。</p><ul><li>安装lua的依赖包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/yuin/gopher-lua</span><br></pre></td></tr></table></figure><h3 id="lua的运行时环境"><a href="#lua的运行时环境" class="headerlink" title="lua的运行时环境"></a>lua的运行时环境</h3><p>lua的运行状态（State）存放着运行时的一些关键数据：运行堆栈，上下文数据等（记不清了讲多了你也记不住），总之不同的状态是相互独立的，不同的状态间数据是不可见的，所以多线程安全。</p><ul><li>创建lua状态</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env := lua.NewState()</span><br></pre></td></tr></table></figure><h3 id="golang与lua的交互"><a href="#golang与lua的交互" class="headerlink" title="golang与lua的交互"></a>golang与lua的交互</h3><p>lua作为一门嵌入式的语言，有个很重要的特点就是能够在lua中能够调用被寄生语言的函数（寄生兽看过吧？），这样就完成了被寄宿的语言开放接口，然后通过lua编写脚本就能够方便的修改逻辑了。</p><ul><li>在lua中注册新的函数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 转换的逻辑是由golang编写的提供给lua调用的接口代码</span></span><br><span class="line"><span class="comment">/// lua本身不支持table与json互转</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// table转json字符串</span></span><br><span class="line">env.SetGlobal(<span class="string">"jsonMarshal"</span>, env.NewFunction(luaJson.JsonMarshal))</span><br><span class="line"><span class="comment">// json字符串转table</span></span><br><span class="line">env.SetGlobal(<span class="string">"jsonUnMarshal"</span>, env.NewFunction(luaJson.JsonUnMarshal))</span><br></pre></td></tr></table></figure><ul><li>相关接口代码</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"github.com/golang/glog"</span></span><br><span class="line">    lua <span class="string">"github.com/yuin/gopher-lua"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查Table是否为List</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkList</span><span class="params">(value lua.LValue)</span> <span class="params">(b <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> value.Type().String() == <span class="string">"table"</span> &#123;</span><br><span class="line">        b = <span class="literal">true</span></span><br><span class="line">        value.(*lua.LTable).ForEach(<span class="function"><span class="keyword">func</span><span class="params">(k, v lua.LValue)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> k.Type().String() != <span class="string">"number"</span> &#123;</span><br><span class="line">                b = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">marshal</span><span class="params">(data lua.LValue)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">switch</span> data.Type() &#123;</span><br><span class="line">    <span class="keyword">case</span> lua.LTTable:</span><br><span class="line">        <span class="keyword">if</span> checkList(data) &#123;</span><br><span class="line">            jdata := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, <span class="number">0</span>)</span><br><span class="line">            data.(*lua.LTable).ForEach(<span class="function"><span class="keyword">func</span><span class="params">(key, value lua.LValue)</span></span> &#123;</span><br><span class="line">                jdata = <span class="built_in">append</span>(jdata, marshal(value))</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> jdata</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            jdata := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line">            data.(*lua.LTable).ForEach(<span class="function"><span class="keyword">func</span><span class="params">(key, value lua.LValue)</span></span> &#123;</span><br><span class="line">                jdata[key.String()] = marshal(value)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> jdata</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> lua.LTNumber:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">float64</span>(data.(lua.LNumber))</span><br><span class="line">    <span class="keyword">case</span> lua.LTString:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>(data.(lua.LString))</span><br><span class="line">    <span class="keyword">case</span> lua.LTBool:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">bool</span>(data.(lua.LBool))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonMarshal</span><span class="params">(L *lua.LState)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    data := L.ToTable(<span class="number">1</span>)</span><br><span class="line">    str, err := json.Marshal(marshal(data))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Error(err)</span><br><span class="line">    &#125;</span><br><span class="line">    L.Push(lua.LString(str))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unmarshal</span><span class="params">(L *lua.LState, data <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">lua</span>.<span class="title">LValue</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> data.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;:</span><br><span class="line">        tb := L.NewTable()</span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> data.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">            tb.RawSet(lua.LString(k), unmarshal(L, v))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tb</span><br><span class="line">    <span class="keyword">case</span> []<span class="keyword">interface</span>&#123;&#125;:</span><br><span class="line">        tb := L.NewTable()</span><br><span class="line">        <span class="keyword">for</span> i, v := <span class="keyword">range</span> data.([]<span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">            tb.Insert(i+<span class="number">1</span>, unmarshal(L, v))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tb</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">        <span class="keyword">return</span> lua.LNumber(data.(<span class="keyword">float64</span>))</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">        <span class="keyword">return</span> lua.LString(data.(<span class="keyword">string</span>))</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> lua.LBool(data.(<span class="keyword">bool</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lua.LNil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JsonUnMarshal</span><span class="params">(L *lua.LState)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    str := L.ToString(<span class="number">1</span>)</span><br><span class="line">    jdata := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    err := json.Unmarshal([]<span class="keyword">byte</span>(str), &amp;jdata)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        glog.Error(err)</span><br><span class="line">    &#125;</span><br><span class="line">    L.Push(unmarshal(L, jdata))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在lua中调用golang提供的接口"><a href="#在lua中调用golang提供的接口" class="headerlink" title="在lua中调用golang提供的接口"></a>在lua中调用golang提供的接口</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processor</span><span class="params">()</span></span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    data[<span class="string">"hello"</span>]=<span class="string">"world"</span></span><br><span class="line">    data[<span class="string">"a"</span>] = &#123;&#125;</span><br><span class="line">    data[<span class="string">"a"</span>][<span class="string">"b"</span>] = <span class="string">"b"</span></span><br><span class="line">    data[<span class="string">"a"</span>][<span class="string">"c"</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">    res = jsonMarshal(data)</span><br><span class="line">    res = jsonUnMarshal(res)</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(res[<span class="string">"a"</span>][<span class="string">"c"</span>]) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(k,v)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;标题几乎是关键词组成，那么这篇文章会讲些什么？&quot;&gt;&lt;a href=&quot;#标题几乎是关键词组成，那么这篇文章会讲些什么？&quot; class=&quot;headerlink&quot; title=&quot;标题几乎是关键词组成，那么这篇文章会讲些什么？&quot;&gt;&lt;/a&gt;标题几乎是关键词组成，那么这篇文章
      
    
    </summary>
    
    
    
      <category term="golang" scheme="https://guaik.github.io/tags/golang/"/>
    
      <category term="递归" scheme="https://guaik.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="lua" scheme="https://guaik.github.io/tags/lua/"/>
    
      <category term="table" scheme="https://guaik.github.io/tags/table/"/>
    
      <category term="json" scheme="https://guaik.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>消息队列在前端的应用</title>
    <link href="https://guaik.github.io/2020/04/13/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9C%A8%E5%89%8D%E7%AB%AF%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://guaik.github.io/2020/04/13/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9C%A8%E5%89%8D%E7%AB%AF%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2020-04-12T16:21:12.000Z</published>
    <updated>2020-04-15T04:52:05.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="队列与堆栈的区别"><a href="#队列与堆栈的区别" class="headerlink" title="队列与堆栈的区别"></a>队列与堆栈的区别</h2><p>队列由一个入口和一个出口组成，先进先出。堆栈只有一个口，后进先出。</p><h2 id="生产消费者模型与队列"><a href="#生产消费者模型与队列" class="headerlink" title="生产消费者模型与队列"></a>生产消费者模型与队列</h2><p>队列是可以用来做缓冲区使用的，当短时间内出现大量数据的时候会造成软件或整个系统的不稳定，这时候我们就可以把数据先丢到队列中缓存起来，然后以合适的速度获取并处理数据保障系统的稳定。这就是生产消费模型，生产者负责生产数据而消费者负责处理数据。</p><h2 id="消息队列在后端开发的应用"><a href="#消息队列在后端开发的应用" class="headerlink" title="消息队列在后端开发的应用"></a>消息队列在后端开发的应用</h2><ul><li><p>电商平台有一项业务：秒杀活动。在极短的时间内服务器将会收到大量商品的购买请求，如何降低业务服务器受到的冲击呢？我们会使用消息队列进行削峰处理。常用的后端消息队列有：Kafka、RabbitMQ、ActiveMQ、ZeroMQ。</p></li><li><p>消息队列通常都支持多个订阅者，利用这个特性可以实现一些服务的负载均衡功能。</p></li></ul><h2 id="📝正题：队列在前端的应用"><a href="#📝正题：队列在前端的应用" class="headerlink" title="📝正题：队列在前端的应用"></a>📝正题：队列在前端的应用</h2><h3 id="限速，让界面更流畅一些"><a href="#限速，让界面更流畅一些" class="headerlink" title="限速，让界面更流畅一些"></a>限速，让界面更流畅一些</h3><p>在聊天室应用中少则0人多则上万人，在收到大量即时通讯消息时如果不加处理全部拿去在界面做渲染那么轻则界面卡顿重则APP卡死。微信小程序给出的调用setData的最佳时间间隔为20ms，也就是如果把数据刷新的频率控制在20ms刷新一次是更合理的。所以消费者应该每隔20ms获取并处理一条数据保障界面的不卡。</p><h3 id="减少没必要的内存浪费"><a href="#减少没必要的内存浪费" class="headerlink" title="减少没必要的内存浪费"></a>减少没必要的内存浪费</h3><p>这样降低了消费的速度，会导致队列中的数据积压严重，大量消耗内存资源，一条消息在几分钟后被看到也是可能的，那如何处理呢？假设1秒钟收到了1000条聊天消息，那么这些消息需要全部显示吗？至少我的眼睛是来不及看完的，所以可以设定队列的最大长度，超出的消息全部丢弃（长度根据实际场景设定）。</p><h3 id="保障重要的消息快速显示并且必须显示"><a href="#保障重要的消息快速显示并且必须显示" class="headerlink" title="保障重要的消息快速显示并且必须显示"></a>保障重要的消息快速显示并且必须显示</h3><p>有个用户在直播间刷了个火箭，嗯，火箭被外星人劫走不见了，世界未解之谜出现。或者由于数据的积压火箭1分钟后终于出现了，主播都下播了。</p><p>为了避免上述问题，我们需要VIP队列，如果说普通聊天消息放入普通队列，那么现金礼物的就要放入VIP队列插队了，并且使命必达，有一条显示一条。这个实现也很容易，VIP队列的最大长度为∞大，不判断长度就行了，虽然也达不到1秒1000个火箭的量，但鱼丸就说不定了。由于VIP队列是独立于普通队列的，所以消息不会被排在普通队列的末尾，实现了插队的功能，通常这个队列的量不会特别大所以能够快速显示出来。</p><h3 id="数据的融合，屏幕能显示N个列表项就刷新N条数据"><a href="#数据的融合，屏幕能显示N个列表项就刷新N条数据" class="headerlink" title="数据的融合，屏幕能显示N个列表项就刷新N条数据"></a>数据的融合，屏幕能显示N个列表项就刷新N条数据</h3><p>如果一个屏幕只能显示10个列表项，你每次有必要刷新10000条数据吗？还不够卡吗？所以当屏幕只能显示10个列表项的时候每次只刷新最新的100条数据，更多的请看聊天记录。这样就又多了一个列表用来存储可见数据了，这个列表只干一件事，融合普通队列和VIP队列的消息用于setData时刷新到屏幕上的数据。</p><h2 id="🚀实战项目：gqueue"><a href="#🚀实战项目：gqueue" class="headerlink" title="🚀实战项目：gqueue"></a>🚀实战项目：gqueue</h2><p><a href="https://github.com/GUAIK-ORG/gqueue" target="_blank" rel="noopener">https://github.com/GUAIK-ORG/gqueue</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;队列与堆栈的区别&quot;&gt;&lt;a href=&quot;#队列与堆栈的区别&quot; class=&quot;headerlink&quot; title=&quot;队列与堆栈的区别&quot;&gt;&lt;/a&gt;队列与堆栈的区别&lt;/h2&gt;&lt;p&gt;队列由一个入口和一个出口组成，先进先出。堆栈只有一个口，后进先出。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
    
      <category term="typescript" scheme="https://guaik.github.io/tags/typescript/"/>
    
      <category term="javascript" scheme="https://guaik.github.io/tags/javascript/"/>
    
      <category term="前端" scheme="https://guaik.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="队列" scheme="https://guaik.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>加权随机算法</title>
    <link href="https://guaik.github.io/2020/04/12/%E5%8A%A0%E6%9D%83%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
    <id>https://guaik.github.io/2020/04/12/%E5%8A%A0%E6%9D%83%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95/</id>
    <published>2020-04-12T14:02:06.000Z</published>
    <updated>2020-04-12T14:26:38.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="白话原理"><a href="#白话原理" class="headerlink" title="白话原理"></a>白话原理</h2><p>生活中最常见的一个例子：现在有4个红球和6个黑球，把这10个球放入到一个不透明的袋子中打乱，那么去袋子中拿到红球的概率是4/10，拿到黑球的概率是6/10，也可以说袋子分配给我红球的概率是4/10，分配给我黑球的概率是6/10。</p><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><ul><li><p>网关服务器通常都会通过负载均衡去分摊计算压力，有的服务器性能会好一些，有的会差一些，所以我们可以通过权重配比的形式将较大的计算压力给到性能较好的服务器。</p></li><li><p>当某台服务器突然出现故障时，微服务架构可以通过服务注册发现将故障的服务器移除，如果是网关服务器的话我们可以将负载均衡的权重置0。</p></li></ul><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 实例对象</span></span><br><span class="line"><span class="keyword">type</span> Object <span class="keyword">struct</span> &#123;</span><br><span class="line">    Weight <span class="keyword">int</span>         <span class="comment">// 权重</span></span><br><span class="line">    Object <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 服务对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调度对象</span></span><br><span class="line"><span class="keyword">type</span> Dispatch <span class="keyword">struct</span> &#123;</span><br><span class="line">    Sources     []*Object   <span class="comment">// 所有服务对象</span></span><br><span class="line">    SLB         []*Object   <span class="comment">// 负载均衡生成的对象</span></span><br><span class="line">    TotalWeight <span class="keyword">int</span>         <span class="comment">// 总权重</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dispatch *Dispatch)</span> <span class="title">Init</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">    dispatch.Sources = <span class="built_in">make</span>([]*LiveObject, <span class="number">0</span>)</span><br><span class="line">    dispatch.SLB = <span class="built_in">make</span>([]*LiveObject, <span class="number">0</span>)</span><br><span class="line">    dispatch.TotalWeight = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新生成负载均衡队列</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dispatch *Dispatch)</span> <span class="title">reGenSLBArray</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dispatch.SLB = <span class="built_in">make</span>([]*LiveObject, <span class="number">0</span>)</span><br><span class="line">    dispatch.TotalWeight = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> dispatch.Sources &#123;</span><br><span class="line">        dispatch.TotalWeight += item.Weight</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; item.Weight; i++ &#123;</span><br><span class="line">            dispatch.SLB = <span class="built_in">append</span>(dispatch.SLB, item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 随机排列顺序</span></span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    rand.Shuffle(dispatch.TotalWeight, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        dispatch.SLB[i], dispatch.SLB[j] = dispatch.SLB[j], dispatch.SLB[i]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加服务对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dispatch *Dispatch)</span> <span class="title">AddObject</span><span class="params">(object *Object)</span></span> &#123;</span><br><span class="line">    dispatch.Sources = <span class="built_in">append</span>(dispatch.Sources, object)</span><br><span class="line">    dispatch.reGenSLBArray()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dispatch *Dispatch)</span> <span class="title">GetObject</span><span class="params">()</span> <span class="params">(object *Object)</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">    <span class="keyword">return</span> dispatch.SLB[rand.Intn(dispatch.TotalWeight)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;白话原理&quot;&gt;&lt;a href=&quot;#白话原理&quot; class=&quot;headerlink&quot; title=&quot;白话原理&quot;&gt;&lt;/a&gt;白话原理&lt;/h2&gt;&lt;p&gt;生活中最常见的一个例子：现在有4个红球和6个黑球，把这10个球放入到一个不透明的袋子中打乱，那么去袋子中拿到红球的概率是4/
      
    
    </summary>
    
    
    
      <category term="golang" scheme="https://guaik.github.io/tags/golang/"/>
    
      <category term="负载均衡" scheme="https://guaik.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>基于Redis的分布式锁</title>
    <link href="https://guaik.github.io/2020/04/12/%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://guaik.github.io/2020/04/12/%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2020-04-12T12:38:39.000Z</published>
    <updated>2020-04-12T15:07:03.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要使用分布式锁"><a href="#为什么要使用分布式锁" class="headerlink" title="为什么要使用分布式锁"></a>为什么要使用分布式锁</h2><p>举个栗子，在设计直播间开播流程的时候会执行很多初始化的操作，也会在缓存中创建本次直播的记录数据，为了避免主播误操作同时执行开播流程多次，在开播成功后会设置开播状态，开播时判断状态为已开播则不处理，直播系统是多实例部署的，为了保护开播状态，需要做到同一时间只能由一台服务器处理开播流程，这时候就会用到分布式锁进行加锁保护。</p><h2 id="线程锁与分布式锁"><a href="#线程锁与分布式锁" class="headerlink" title="线程锁与分布式锁"></a>线程锁与分布式锁</h2><p>锁的意义在于保护全局可见对象。在单进程中使用多线程时会通过线程锁去保护当前进程中的全局对象（某些情况可用原子操作）。分布式系统可理解为多进程系统，线程锁无法锁住其他进程中的执行流程，所以需要一个全局的锁来管控所有进程中的执行流程（如果相同名称的锁处于上锁状态则等待）。</p><h2 id="Redis与SetNX"><a href="#Redis与SetNX" class="headerlink" title="Redis与SetNX"></a>Redis与SetNX</h2><p>Redis是单进程系统，它的SetNX是个原子操作，我们可以利用这两点来实现分布式锁。如果SetNX执行成功则意味着拿到了锁，相反执行失败则循环等待拿锁或超时退出。</p><h2 id="设计注意事项"><a href="#设计注意事项" class="headerlink" title="设计注意事项"></a>设计注意事项</h2><p>1、为了避免单持有锁的进程奔溃而无法释放锁，所以必须能够为锁设定过期时间自动释放锁资源。</p><p>2、使用TTL检查锁是否成功的被设置过期时间，如果返回-1（未被设置）的话，使用Expire为其设定过期时间。</p><p>3、在释放锁的时候需要使用Watch命令，确保监测的值在事务执行时时未被改变，如果其他进程修改了锁，会触发事务异常，然后重新执行Watch。</p><hr><p>分享一个我写的Redis封装类，仅实现了连接和锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/go-redis/redis/v7"</span></span><br><span class="line">    uuid <span class="string">"github.com/satori/go.uuid"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rds <span class="keyword">struct</span> &#123;</span><br><span class="line">    Client         *redis.Client</span><br><span class="line">    AcquireTimeout <span class="keyword">int32</span></span><br><span class="line">    LockTimeout    <span class="keyword">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRds</span><span class="params">(host, passwd <span class="keyword">string</span>, db <span class="keyword">int</span>)</span> <span class="params">(rds *Rds, err error)</span></span> &#123;</span><br><span class="line">    rdsOpt := &amp;redis.Options&#123;</span><br><span class="line">        Addr:     host,</span><br><span class="line">        Password: passwd,</span><br><span class="line">        DB:       db,</span><br><span class="line">    &#125;</span><br><span class="line">    client := redis.NewClient(rdsOpt)</span><br><span class="line">    _, err = client.Ping().Result()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    rds = &amp;Rds&#123;Client: client, AcquireTimeout: <span class="number">10</span>, LockTimeout: <span class="number">10</span>&#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rds)</span> <span class="title">AcquireLockWithTimeout</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="params">(identifier <span class="keyword">string</span>, b <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    identifier = uuid.NewV4().String()</span><br><span class="line">    lockname := <span class="string">"lock:"</span> + key</span><br><span class="line">    end := time.Now().Add(time.Second * time.Duration(r.AcquireTimeout))</span><br><span class="line">    <span class="keyword">for</span> time.Now().Before(end) &#123;</span><br><span class="line">        <span class="keyword">if</span> r.Client.SetNX(lockname, identifier, time.Second*time.Duration(r.LockTimeout)).Val() &#123;</span><br><span class="line">            <span class="comment">// 如果key不存在，并成功设置了key</span></span><br><span class="line">            b = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> r.Client.TTL(lockname).Val() == <span class="number">-1</span> &#123;</span><br><span class="line">            <span class="comment">// 如果key存在，但是没有剩余时间</span></span><br><span class="line">            r.Client.Expire(lockname, time.Second*time.Duration(r.LockTimeout))</span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(time.Microsecond)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rds)</span> <span class="title">ReleaseLock</span><span class="params">(key, identifier <span class="keyword">string</span>)</span> <span class="params">(b <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    lockname := <span class="string">"lock:"</span> + key</span><br><span class="line">    txf := <span class="function"><span class="keyword">func</span><span class="params">(tx *redis.Tx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        v, err := tx.Get(lockname).Result()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        _, err = tx.Pipelined(<span class="function"><span class="keyword">func</span><span class="params">(pipe redis.Pipeliner)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> v == identifier &#123;</span><br><span class="line">                pipe.Del(lockname)</span><br><span class="line">                b = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        err := r.Client.Watch(txf, lockname)</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> err == redis.TxFailedErr &#123;</span><br><span class="line">            glog.Error(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要使用分布式锁&quot;&gt;&lt;a href=&quot;#为什么要使用分布式锁&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用分布式锁&quot;&gt;&lt;/a&gt;为什么要使用分布式锁&lt;/h2&gt;&lt;p&gt;举个栗子，在设计直播间开播流程的时候会执行很多初始化的操作，也会在缓存中创建
      
    
    </summary>
    
    
    
      <category term="golang" scheme="https://guaik.github.io/tags/golang/"/>
    
      <category term="redis" scheme="https://guaik.github.io/tags/redis/"/>
    
      <category term="分布式锁" scheme="https://guaik.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
</feed>
