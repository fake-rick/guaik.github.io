<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>怪客的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.guaik.org/"/>
  <updated>2020-04-12T12:45:12.540Z</updated>
  <id>https://blog.guaik.org/</id>
  
  <author>
    <name>guaik</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang基于Redis的分布式锁</title>
    <link href="https://blog.guaik.org/2020/04/12/Golang%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://blog.guaik.org/2020/04/12/Golang%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2020-04-12T12:38:39.000Z</published>
    <updated>2020-04-12T12:45:12.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>1、为了避免单持有锁的进程奔溃而无法释放锁，所以必须能够为锁设定过期时间自动释放锁资源</p><p>2、使用TTL检查锁是否成功的被设置过期时间，如果返回-1（未被设置）的话，使用Expire为其设定过期时间</p><p>3、在释放锁的时候需要使用Watch命令，确保监测的值在事务执行时时未被改变，如果其他进程修改了锁，会触发事务异常，然后重新执行Watch。</p><hr><p>分享一个我写的Redis封装类，仅实现了连接和锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/go-redis/redis/v7"</span></span><br><span class="line">    uuid <span class="string">"github.com/satori/go.uuid"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rds <span class="keyword">struct</span> &#123;</span><br><span class="line">    Client         *redis.Client</span><br><span class="line">    AcquireTimeout <span class="keyword">int32</span></span><br><span class="line">    LockTimeout    <span class="keyword">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRds</span><span class="params">(host, passwd <span class="keyword">string</span>, db <span class="keyword">int</span>)</span> <span class="params">(rds *Rds, err error)</span></span> &#123;</span><br><span class="line">    rdsOpt := &amp;redis.Options&#123;</span><br><span class="line">        Addr:     host,</span><br><span class="line">        Password: passwd,</span><br><span class="line">        DB:       db,</span><br><span class="line">    &#125;</span><br><span class="line">    client := redis.NewClient(rdsOpt)</span><br><span class="line">    _, err = client.Ping().Result()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    rds = &amp;Rds&#123;Client: client, AcquireTimeout: <span class="number">10</span>, LockTimeout: <span class="number">10</span>&#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rds)</span> <span class="title">AcquireLockWithTimeout</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="params">(identifier <span class="keyword">string</span>, b <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    identifier = uuid.NewV4().String()</span><br><span class="line">    lockname := <span class="string">"lock:"</span> + key</span><br><span class="line">    end := time.Now().Add(time.Second * time.Duration(r.AcquireTimeout))</span><br><span class="line">    <span class="keyword">for</span> time.Now().Before(end) &#123;</span><br><span class="line">        <span class="keyword">if</span> r.Client.SetNX(lockname, identifier, time.Second*time.Duration(r.LockTimeout)).Val() &#123;</span><br><span class="line">            <span class="comment">// 如果key不存在，并成功设置了key</span></span><br><span class="line">            b = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> r.Client.TTL(lockname).Val() == <span class="number">-1</span> &#123;</span><br><span class="line">            <span class="comment">// 如果key存在，但是没有剩余时间</span></span><br><span class="line">            r.Client.Expire(lockname, time.Second*time.Duration(r.LockTimeout))</span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(time.Microsecond)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rds)</span> <span class="title">ReleaseLock</span><span class="params">(key, identifier <span class="keyword">string</span>)</span> <span class="params">(b <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    lockname := <span class="string">"lock:"</span> + key</span><br><span class="line">    txf := <span class="function"><span class="keyword">func</span><span class="params">(tx *redis.Tx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        v, err := tx.Get(lockname).Result()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        _, err = tx.Pipelined(<span class="function"><span class="keyword">func</span><span class="params">(pipe redis.Pipeliner)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> v == identifier &#123;</span><br><span class="line">                pipe.Del(lockname)</span><br><span class="line">                b = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        err := r.Client.Watch(txf, lockname)</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> err == redis.TxFailedErr &#123;</span><br><span class="line">            glog.Error(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;分布式锁&quot;&gt;&lt;a href=&quot;#分布式锁&quot; class=&quot;headerlink&quot; title=&quot;分布式锁&quot;&gt;&lt;/a&gt;分布式锁&lt;/h3&gt;&lt;p&gt;1、为了避免单持有锁的进程奔溃而无法释放锁，所以必须能够为锁设定过期时间自动释放锁资源&lt;/p&gt;
&lt;p&gt;2、使用TTL检查锁是
      
    
    </summary>
    
    
    
      <category term="golang redis 分布式锁" scheme="https://blog.guaik.org/tags/golang-redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
</feed>
